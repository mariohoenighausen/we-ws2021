{
  "html": {
    "headings": {
      "content": "Die Überschriftenelemente bestehen aus sechs verschiedenen Leveln. <h1> ist die Überschrift mit der höchsten Gewichtung und <h6> mit der kleinsten. Ein Überschriften-Element beschreibt das Thema des Bereiches, welcher der Überschrift folgt. Überschriften können auch verwendet werden, um ein Inhaltsverzeichnis für ein Dokument automatisch zu erstellen.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/HTML/Element/h1-h6"
      ]
    },
    "paragraph": {
      "content": "Das <p>-Element erzeugt einen Absatz, den zusammenhängenden Abschnitt eines längeren Textes. In HTML kann <p> jedoch für jedwede Art von zu gruppierendem, zusammenhängendem Inhalt genutzt werden, zum Beispiel Bilder oder Formularfelder.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/HTML/Element/p"
      ]
    }
  },
  "css": {
    "selectors": {
      "content": "Selektoren definieren, auf welche Elemente eine Reihe von CSS Regeln angewendet wird.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/CSS/CSS_Selectors"
      ]
    },
    "colors": {
      "content": "Der CSS Datentyp Color beschreibt eine Farbe im sRGB Farbraum. Eine Farbe kann auf eine von drei Arten beschrieben werden: Schlüsselworte, rgb und rgba, hsl und hsla. ...",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/CSS/Farben"
      ]
    }
  },
  "javascript": {
    "function": {
      "content": "Funktionen sind ein Grundbaustein in JavaScript. Eine Funktion ist eine Prozedur - eine Reihe von Anweisungen, um eine Aufgabe auszuführen oder eine Wert auszurechnen. Um Funktionen zu verwenden, müssen diese im Scope (Gültigkeitsbereich) deklariert werden, in dem sie ausgeführt werden soll.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/JavaScript/Guide/Funktionen"
      ]
    },
    "object": {
      "content": "Ein Objekt ist eine Sammlung von zusammenhängenden Daten und/oder Funktionalitäten. Diese bestehen üblicherweise aus verschiedenen Variablen und Funktionen, die Eigenschaften und Methoden genannt werden, wenn sie sich innerhalb von Objekten befinden.",
      "references": [
        "https://developer.mozilla.org/de/docs/Learn/JavaScript/Objects/Basics"
      ]
    },
    "promise": {
      "content": "",
      "references": [
        "https://www.w3schools.com/js/js_promise.asp",
        "https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "https://javascript.info/promise-basics",
        "https://www.freecodecamp.org/news/what-is-promise-in-javascript-for-beginners/"
      ]
    },
    "async": {
      "content": "",
      "references": [
        "https://www.w3schools.com/js/js_async.asp",
        "https://javascript.info/async-await",
        "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await"
      ]
    },
    "fetch": {
      "content": "",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",
        "https://www.w3schools.com/js/js_api_fetch.asp",
        "https://developers.google.com/web/updates/2015/03/introduction-to-fetch"
      ]
    },
    "callback": {
      "content": "",
      "references": [
        "https://www.w3schools.com/js/js_callback.asp",
        "https://wiki.selfhtml.org/wiki/JavaScript/Tutorials/Umgang_mit_Callback-Funktionen",
        "https://developer.mozilla.org/en-US/docs/Glossary/Callback_function"
      ]
    },
    "class": {
      "content": "",
      "references": [
        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
        "https://www.w3schools.com/js/js_class_intro.asp",
        "https://javascript.info/class"
      ]
    }
  },
  "nodejs": {
    "about": {
      "content": "As an asynchronous event-driven JavaScript runtime, Node.js is designed to build scalable network applications. In the following hello world example, many connections can be handled concurrently. Upon each connection, the callback is fired, but if there is no work to be done, Node.js will sleep.",
      "references": [
        "https://nodejs.org/en/about/"
      ]
    }
  }
}